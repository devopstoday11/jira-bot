#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2015 Alex Turbov <i.zaufi@gmail.com>
#
# JIRA Bot is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# JIRA Bot is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import configparser
import jira
import os
import sys


class Application(object):
    def __init__(self):
        # Try to parse config file option first
        config_parser = argparse.ArgumentParser(
            description='JIRA Issue Creation Bot'
          , add_help=False
          )
        config_parser.add_argument(
            "-c"
          , "--config-file"
          , help="specify config file to use"
          , metavar="FILE"
          )
        args, remaining_argv = config_parser.parse_known_args()

        defaults = {
            "server" : None
          , "verbose" : True
          }

        # Collect configuration data from various places:
        configs = list()
        #  - is there any config file provided via CLI?
        if args.config_file:
            # Ok, lets use it
            configs.append(self._parse_config_file(args.config_file))
        else:
            # Heh, then try to get config data from system-wide and per user config files
            for config_file in ['/etc/jira-bot/jira-bot.conf', os.path.join(os.environ['HOME'], '.jira-botrc')]:
                if os.path.isfile(config_file):
                    configs.append(self._parse_config_file(config_file))

        # Merge configuration data
        self.config = dict()
        for cfg in configs:
            for section in cfg.sections():
                self.config[section] = dict(cfg[section].items())

        # Ok, now try to parse rest CLI options
        parser = argparse.ArgumentParser(
            # Inherit options from config_parser
            parents=[config_parser]
            # print script description with -h/--help
          , description=__doc__
            # Don't mess with format of description
          , formatter_class=argparse.RawDescriptionHelpFormatter
          )
        parser.add_argument(
            '-v'
          , '--verbose'
          , action='store_true'
          , help='verbose output'
          )
        parser.add_argument(
            '-s'
          , '--server'
          , help='JIRA server URI'
          )
        parser.add_argument(
            '-u'
          , '--username'
          , help='JIRA account name'
          )
        parser.add_argument(
            '-p'
          , '--password'
          , help='JIRA account password'
          )
        parser.add_argument(
            '-j'
          , '--project'
          , help='JIRA project to use'
          )
        args = parser.parse_args()

        # Merge CLI options w/ parsed configuration
        target_section = 'default'

        # Check if `--server` is provided
        if args.server is not None:
            # Override used server section
            target_section = args.server
            self.config['default']['server'] = args.server
        # Check if `--username` is provided
        if args.username is not None:
            self.config[target_section]['username'] = args.username
            # ATTENTION Reset password
            self.config[target_section]['password'] = None
        # Check if `--password` is provided
        if args.password is not None:
            self.config[target_section]['password'] = args.password
        # Check if `--project` is provided
        if args.project is not None:
            self.config[target_section]['project'] = args.project
        # Check if `--verbose` is provided
        if args.verbose is not None:
            self.config['default']['verbose'] = args.verbose

        # Make some SPAM
        if args.verbose:
            print('[DEBUG] CLI options: {}'.format(repr(self.config)))
        # Args seem Ok, ready to run


    def _parse_config_file(self, config_file):
        config = configparser.ConfigParser(allow_no_value=True)
        config.read([config_file])
        return config


    def run(self):

        # Set exit code to SUCCESS
        return os.EX_OK


#
# Main entry point
#
if __name__ == "__main__":
    try:
        a = Application()
        sys.exit(a.run())
    except KeyboardInterrupt:
        sys.exit(1)
    except RuntimeError as ex:
        print('Error: {}'.format(ex), file=sys.stderr)
        sys.exit(1)
